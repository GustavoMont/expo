{"name":"expo-av","kind":1,"originalName":"","children":[{"name":"_DEFAULT_INITIAL_PLAYBACK_STATUS","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"The default initial `AVPlaybackStatusToSet` of all `Audio.Sound` objects and `Video` components is as follows:","text":"```javascript\n{\n  progressUpdateIntervalMillis: 500,\n  positionMillis: 0,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n}\n```\n\nThis default initial status can be overwritten by setting the optional `initialStatus` in `loadAsync()` or `Audio.Sound.createAsync()`.\n"},"type":{"type":"reference","name":"AVPlaybackStatusToSet"},"defaultValue":"..."},{"name":"AV","kind":256,"kindString":"Interface","children":[{"name":"getStatusAsync","kind":2048,"kindString":"Method","signatures":[{"name":"getStatusAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Gets the `AVPlaybackStatus` of the `playbackObject`.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setStatusAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setStatusAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\nor rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.\n"},"parameters":[{"name":"status","kind":32768,"kindString":"Parameter","comment":{"shortText":"The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status."},"type":{"type":"reference","name":"AVPlaybackStatusToSet"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"extendedBy":[{"type":"reference","name":"Playback"}]},{"name":"AVMetadata","kind":16777216,"kindString":"Reference"},{"name":"AVMetadata","kind":4194304,"kindString":"Type alias","comment":{"shortText":"Object passed to the `onMetadataUpdate` function."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"title","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string with the title of the sound object."},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"AVPlaybackSource","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackSource","kind":4194304,"kindString":"Type alias","comment":{"shortText":"The following forms of source are supported:\n- A dictionary of the form `AVPlaybackSourceObject`.\n  The `overrideFileExtensionAndroid` property may come in handy if the player receives an URL like `example.com/play` which redirects to `example.com/player.m3u8`.\n  Setting this property to `m3u8` would allow the Android player to properly infer the content type of the media and use proper media file reader.\n- `require('path/to/file')` for a media file asset in the source code directory.\n- An [`Asset`](./asset) object for a media file asset.","text":"The [iOS developer documentation](https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/MediaLayer/MediaLayer.html)\nlists the audio and video formats supported on iOS.\n\nThere are two sets of audio and video formats supported on Android: [formats supported by ExoPlayer](https://google.github.io/ExoPlayer/supported-formats.html)\nand [formats supported by Android's MediaPlayer](https://developer.android.com/guide/appendix/media-formats.html#formats-table).\nExpo uses ExoPlayer implementation by default. To use `MediaPlayer`, add `androidImplementation: 'MediaPlayer'` to the initial status of the AV object.\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"AVPlaybackSourceObject"},{"type":"reference","name":"Asset"}]}},{"name":"AVPlaybackSourceObject","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackSourceObject","kind":4194304,"kindString":"Type alias","comment":{"shortText":"One of the possible forms of the `AVPlaybackSource`."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"headers","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional headers object passed in a network request."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"name":"overrideFileExtensionAndroid","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional string overriding extension inferred from the URL.","tags":[{"tag":"platform","text":"android\n"}]},"type":{"type":"intrinsic","name":"string"}},{"name":"uri","kind":1024,"kindString":"Property","comment":{"shortText":"A network URL pointing to a media file."},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"AVPlaybackStatus","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackStatus","kind":4194304,"kindString":"Type alias","comment":{"shortText":"This is the structure returned from all playback API calls and describes the state of the `playbackObject` at that point in time.\nIt can take a form of `AVPlaybackStatusSuccess` or `AVPlaybackStatusError` based on the `playbackObject` load status."},"type":{"type":"union","types":[{"type":"reference","name":"AVPlaybackStatusError"},{"type":"reference","name":"AVPlaybackStatusSuccess"}]}},{"name":"AVPlaybackStatusError","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackStatusError","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"androidImplementation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html),\nuses [ExoPlayer](https://google.github.io/ExoPlayer/) otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer\n([formats supported by ExoPlayer](https://google.github.io/ExoPlayer/supported-formats.html), [formats supported by Android's MediaPlayer](https://developer.android.com/guide/appendix/media-formats.html#formats-table)).","text":"Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).\n","tags":[{"tag":"platform","text":"android\n"}]},"type":{"type":"intrinsic","name":"string"}},{"name":"error","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string only present if the `playbackObject` just encountered a fatal error and forced unload.\nPopulated exactly once when an error forces the object to unload."},"type":{"type":"intrinsic","name":"string"}},{"name":"isLoaded","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean set to `false`."},"type":{"type":"literal","value":false}}]}}},{"name":"AVPlaybackStatusSuccess","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackStatusSuccess","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"androidImplementation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html),\nuses [ExoPlayer](https://google.github.io/ExoPlayer/) otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer\n([formats supported by ExoPlayer](https://google.github.io/ExoPlayer/supported-formats.html), [formats supported by Android's MediaPlayer](https://developer.android.com/guide/appendix/media-formats.html#formats-table)).","text":"Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).\n","tags":[{"tag":"platform","text":"android\n"}]},"type":{"type":"intrinsic","name":"string"}},{"name":"audioPan","kind":1024,"kindString":"Property","comment":{"shortText":"The current audio panning value of the audio for this media."},"type":{"type":"intrinsic","name":"number"}},{"name":"didJustFinish","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the media just played to completion at the time that this status was received.\nWhen the media plays to completion, the function passed in `setOnPlaybackStatusUpdate()` is called exactly once\nwith `didJustFinish` set to `true`. `didJustFinish` is never `true` in any other case."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"durationMillis","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The duration of the media in milliseconds. This is only present if the media has a duration.\n> Note that in some cases, a media file's duration is readable on Android, but not on iOS."},"type":{"type":"intrinsic","name":"number"}},{"name":"isBuffering","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the media is currently buffering."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isLoaded","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean set to `true`."},"type":{"type":"literal","value":true}},{"name":"isLooping","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the media is currently looping."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isMuted","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the audio of this media is currently muted."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isPlaying","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the media is currently playing."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"pitchCorrectionQuality","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"iOS time pitch algorithm setting. See `setRateAsync` for details."},"type":{"type":"reference","name":"PitchCorrectionQuality"}},{"name":"playableDurationMillis","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The position until which the media has been buffered into memory. Like `durationMillis`, this is only present in some cases."},"type":{"type":"intrinsic","name":"number"}},{"name":"positionMillis","kind":1024,"kindString":"Property","comment":{"shortText":"The current position of playback in milliseconds."},"type":{"type":"intrinsic","name":"number"}},{"name":"progressUpdateIntervalMillis","kind":1024,"kindString":"Property","comment":{"shortText":"The minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See `setOnPlaybackStatusUpdate()` for details."},"type":{"type":"intrinsic","name":"number"}},{"name":"rate","kind":1024,"kindString":"Property","comment":{"shortText":"The current rate of the media."},"type":{"type":"intrinsic","name":"number"}},{"name":"seekMillisToleranceAfter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"seekMillisToleranceBefore","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"shouldCorrectPitch","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if we are correcting the pitch for a changed rate."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldPlay","kind":1024,"kindString":"Property","comment":{"shortText":"A boolean describing if the media is supposed to play."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"uri","kind":1024,"kindString":"Property","comment":{"shortText":"The location of the media source."},"type":{"type":"intrinsic","name":"string"}},{"name":"volume","kind":1024,"kindString":"Property","comment":{"shortText":"The current volume of the audio for this media."},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"AVPlaybackStatusToSet","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackStatusToSet","kind":4194304,"kindString":"Type alias","comment":{"shortText":"This is the structure passed to `setStatusAsync()` to modify the state of the `playbackObject`."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"androidImplementation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html),\nuses [ExoPlayer](https://google.github.io/ExoPlayer/) otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer\n([formats supported by ExoPlayer](https://google.github.io/ExoPlayer/supported-formats.html), [formats supported by Android's MediaPlayer](https://developer.android.com/guide/appendix/media-formats.html#formats-table)).","text":"Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).\n","tags":[{"tag":"platform","text":"android\n"}]},"type":{"type":"intrinsic","name":"string"}},{"name":"audioPan","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The current audio panning value of the audio for this media.\n> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume.\n> Also note that this is only available when the video was loaded using `androidImplementation: 'MediaPlayer'`","tags":[{"tag":"platform","text":"android\n"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isLooping","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A boolean describing if the media is currently looping."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isMuted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A boolean describing if the audio of this media is currently muted.\n> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"pitchCorrectionQuality","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"iOS time pitch algorithm setting. See `setRateAsync` for details."},"type":{"type":"reference","name":"PitchCorrectionQuality"}},{"name":"positionMillis","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The current position of playback in milliseconds."},"type":{"type":"intrinsic","name":"number"}},{"name":"progressUpdateIntervalMillis","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See `setOnPlaybackStatusUpdate()` for details."},"type":{"type":"intrinsic","name":"number"}},{"name":"rate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The current rate of the media.","tags":[{"tag":"platform","text":"android API 23+"},{"tag":"platform","text":"ios\n"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"seekMillisToleranceAfter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"seekMillisToleranceBefore","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"shouldCorrectPitch","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A boolean describing if we are correcting the pitch for a changed rate."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldPlay","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A boolean describing if the media is supposed to play."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"volume","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The current volume of the audio for this media.\n> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume."},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"AVPlaybackTolerance","kind":16777216,"kindString":"Reference"},{"name":"AVPlaybackTolerance","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"toleranceMillisAfter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"toleranceMillisBefore","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"PitchCorrectionQuality","kind":16777216,"kindString":"Reference"},{"name":"PitchCorrectionQuality","kind":8,"kindString":"Enumeration","comment":{"shortText":"Check [official Apple documentation](https://developer.apple.com/documentation/avfoundation/avaudiotimepitchalgorithmlowqualityzerolatency) for more information."},"children":[{"name":"High","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Equivalent to `AVAudioTimePitchAlgorithmSpectral`."}},{"name":"Low","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Equivalent to `AVAudioTimePitchAlgorithmLowQualityZeroLatency`."}},{"name":"Medium","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Equivalent to `AVAudioTimePitchAlgorithmTimeDomain`."}}]},{"name":"Playback","kind":256,"kindString":"Interface","comment":{"shortText":"On the `playbackObject` reference, the following API is provided."},"children":[{"name":"getStatusAsync","kind":2048,"kindString":"Method","signatures":[{"name":"getStatusAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Gets the `AVPlaybackStatus` of the `playbackObject`.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","name":"AV.getStatusAsync"}}],"inheritedFrom":{"type":"reference","name":"AV.getStatusAsync"}},{"name":"loadAsync","kind":2048,"kindString":"Method","signatures":[{"name":"loadAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Loads the media from `source` into memory and prepares it for playing. This must be called before calling `setStatusAsync()`\nor any of the convenience set status methods. This method can only be called if the `playbackObject` is in an unloaded state.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is loaded, or rejects if loading failed.\nThe `Promise` will also reject if the `playbackObject` was already loaded. See below for details on `AVPlaybackStatus`.\n"},"parameters":[{"name":"source","kind":32768,"kindString":"Parameter","comment":{"shortText":"The source of the media."},"type":{"type":"reference","name":"AVPlaybackSource"}},{"name":"initialStatus","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The initial intended `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the default initial playback status.\nThis value defaults to `{}` if no parameter is passed. For more information see the details on `AVPlaybackStatusToSet` type\nand the default initial playback status."},"type":{"type":"reference","name":"AVPlaybackStatusToSet"}},{"name":"downloadAsync","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"If set to `true`, the system will attempt to download the resource to the device before loading.\nThis value defaults to `true`. Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"pauseAsync","kind":2048,"kindString":"Method","signatures":[{"name":"pauseAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false })`."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"playAsync","kind":2048,"kindString":"Method","signatures":[{"name":"playAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true })`.","text":"Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\non the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"playFromPositionAsync","kind":2048,"kindString":"Method","signatures":[{"name":"playFromPositionAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true, positionMillis, seekMillisToleranceAfter: tolerances.seekMillisToleranceAfter, seekMillisToleranceBefore: tolerances.seekMillisToleranceBefore })`.","text":"Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\non the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`."},"parameters":[{"name":"positionMillis","kind":32768,"kindString":"Parameter","comment":{"shortText":"The desired position of playback in milliseconds."},"type":{"type":"intrinsic","name":"number"}},{"name":"tolerances","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n"},"type":{"type":"reference","name":"AVPlaybackTolerance"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"replayAsync","kind":2048,"kindString":"Method","signatures":[{"name":"replayAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Replays the playback item. When using `playFromPositionAsync(0)` the item is seeked to the position at `0 ms`.\nOn iOS this method uses internal implementation of the player and is able to play the item from the beginning immediately.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\nor rejects if setting the new status failed.\n"},"parameters":[{"name":"status","kind":32768,"kindString":"Parameter","comment":{"shortText":"The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.\n`positionMillis` and `shouldPlay` properties will be overridden with respectively `0` and `true`."},"type":{"type":"reference","name":"AVPlaybackStatusToSet"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setIsLoopingAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setIsLoopingAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ isLooping })`."},"parameters":[{"name":"isLooping","kind":32768,"kindString":"Parameter","comment":{"shortText":"A boolean describing if the media should play once (`false`) or loop indefinitely (`true`).\n"},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setIsMutedAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setIsMutedAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ isMuted })`."},"parameters":[{"name":"isMuted","kind":32768,"kindString":"Parameter","comment":{"shortText":"A boolean describing if the audio of this media should be muted.\n"},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setPositionAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setPositionAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ positionMillis })`."},"parameters":[{"name":"positionMillis","kind":32768,"kindString":"Parameter","comment":{"shortText":"The desired position of playback in milliseconds."},"type":{"type":"intrinsic","name":"number"}},{"name":"tolerances","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n"},"type":{"type":"reference","name":"AVPlaybackTolerance"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setProgressUpdateIntervalAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setProgressUpdateIntervalAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ progressUpdateIntervalMillis })`."},"parameters":[{"name":"progressUpdateIntervalMillis","kind":32768,"kindString":"Parameter","comment":{"shortText":"The new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`.\nSee `setOnPlaybackStatusUpdate()` for details.\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setRateAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setRateAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ rate, shouldCorrectPitch, pitchCorrectionQuality })`."},"parameters":[{"name":"rate","kind":32768,"kindString":"Parameter","comment":{"shortText":"The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS."},"type":{"type":"intrinsic","name":"number"}},{"name":"shouldCorrectPitch","kind":32768,"kindString":"Parameter","comment":{"shortText":"A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected\n(so a rate different than `1.0` will timestretch the audio)."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"pitchCorrectionQuality","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"iOS time pitch algorithm setting, defaults to `Audio.PitchCorrectionQuality.Low`.\n"},"type":{"type":"reference","name":"PitchCorrectionQuality"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"setStatusAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setStatusAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\nor rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.\n"},"parameters":[{"name":"status","kind":32768,"kindString":"Parameter","comment":{"shortText":"The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status."},"type":{"type":"reference","name":"AVPlaybackStatusToSet"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","name":"AV.setStatusAsync"}}],"inheritedFrom":{"type":"reference","name":"AV.setStatusAsync"}},{"name":"setVolumeAsync","kind":2048,"kindString":"Method","signatures":[{"name":"setVolumeAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ volume, audioPan })`.\nNote: `audioPan` is currently only supported on Android using `androidImplementation: 'MediaPlayer'`"},"parameters":[{"name":"volume","kind":32768,"kindString":"Parameter","comment":{"shortText":"A number between `0.0` (silence) and `1.0` (maximum volume)."},"type":{"type":"intrinsic","name":"number"}},{"name":"audioPan","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"A number between `-1.0` (full left) and `1.0` (full right).\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"stopAsync","kind":2048,"kindString":"Method","signatures":[{"name":"stopAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false, positionMillis: 0 })`."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"unloadAsync","kind":2048,"kindString":"Method","signatures":[{"name":"unloadAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Unloads the media from memory. `loadAsync()` must be called again in order to be able to play the media.\n> This cleanup function will be automatically called in the `Video` component's `componentWillUnmount`.","returns":"A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is unloaded, or rejects if unloading failed.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AVPlaybackStatus"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"extendedTypes":[{"type":"reference","name":"AV"}]}]}